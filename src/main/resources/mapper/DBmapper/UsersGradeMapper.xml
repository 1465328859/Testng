<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.Test.model.DBmodel.UsersGradeMapper">
  <resultMap id="BaseResultMap" type="com.Test.model.DBmodel.UsersGrade">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="grade" jdbcType="INTEGER" property="grade" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="rebate" jdbcType="DECIMAL" property="rebate" />
    <result column="up_charge" jdbcType="DECIMAL" property="upCharge" />
    <result column="up_bet" jdbcType="DECIMAL" property="upBet" />
    <result column="award_once" jdbcType="DECIMAL" property="awardOnce" />
    <result column="award_month" jdbcType="DECIMAL" property="awardMonth" />
    <result column="min_bet" jdbcType="DECIMAL" property="minBet" />
    <result column="open" jdbcType="SMALLINT" property="open" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, grade, name, rebate, up_charge, up_bet, award_once, award_month, min_bet, open
  </sql>
  <select id="selectByExample" parameterType="com.Test.model.DBmodel.UsersGradeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from users_grade
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users_grade
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from users_grade
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.Test.model.DBmodel.UsersGradeExample">
    delete from users_grade
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.Test.model.DBmodel.UsersGrade">
    insert into users_grade (id, grade, name, 
      rebate, up_charge, up_bet, 
      award_once, award_month, min_bet, 
      open)
    values (#{id,jdbcType=INTEGER}, #{grade,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{rebate,jdbcType=DECIMAL}, #{upCharge,jdbcType=DECIMAL}, #{upBet,jdbcType=DECIMAL}, 
      #{awardOnce,jdbcType=DECIMAL}, #{awardMonth,jdbcType=DECIMAL}, #{minBet,jdbcType=DECIMAL}, 
      #{open,jdbcType=SMALLINT})
  </insert>
  <insert id="insertSelective" parameterType="com.Test.model.DBmodel.UsersGrade">
    insert into users_grade
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="rebate != null">
        rebate,
      </if>
      <if test="upCharge != null">
        up_charge,
      </if>
      <if test="upBet != null">
        up_bet,
      </if>
      <if test="awardOnce != null">
        award_once,
      </if>
      <if test="awardMonth != null">
        award_month,
      </if>
      <if test="minBet != null">
        min_bet,
      </if>
      <if test="open != null">
        open,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="rebate != null">
        #{rebate,jdbcType=DECIMAL},
      </if>
      <if test="upCharge != null">
        #{upCharge,jdbcType=DECIMAL},
      </if>
      <if test="upBet != null">
        #{upBet,jdbcType=DECIMAL},
      </if>
      <if test="awardOnce != null">
        #{awardOnce,jdbcType=DECIMAL},
      </if>
      <if test="awardMonth != null">
        #{awardMonth,jdbcType=DECIMAL},
      </if>
      <if test="minBet != null">
        #{minBet,jdbcType=DECIMAL},
      </if>
      <if test="open != null">
        #{open,jdbcType=SMALLINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.Test.model.DBmodel.UsersGradeExample" resultType="java.lang.Long">
    select count(*) from users_grade
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update users_grade
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.grade != null">
        grade = #{record.grade,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.rebate != null">
        rebate = #{record.rebate,jdbcType=DECIMAL},
      </if>
      <if test="record.upCharge != null">
        up_charge = #{record.upCharge,jdbcType=DECIMAL},
      </if>
      <if test="record.upBet != null">
        up_bet = #{record.upBet,jdbcType=DECIMAL},
      </if>
      <if test="record.awardOnce != null">
        award_once = #{record.awardOnce,jdbcType=DECIMAL},
      </if>
      <if test="record.awardMonth != null">
        award_month = #{record.awardMonth,jdbcType=DECIMAL},
      </if>
      <if test="record.minBet != null">
        min_bet = #{record.minBet,jdbcType=DECIMAL},
      </if>
      <if test="record.open != null">
        open = #{record.open,jdbcType=SMALLINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update users_grade
    set id = #{record.id,jdbcType=INTEGER},
      grade = #{record.grade,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      rebate = #{record.rebate,jdbcType=DECIMAL},
      up_charge = #{record.upCharge,jdbcType=DECIMAL},
      up_bet = #{record.upBet,jdbcType=DECIMAL},
      award_once = #{record.awardOnce,jdbcType=DECIMAL},
      award_month = #{record.awardMonth,jdbcType=DECIMAL},
      min_bet = #{record.minBet,jdbcType=DECIMAL},
      open = #{record.open,jdbcType=SMALLINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.Test.model.DBmodel.UsersGrade">
    update users_grade
    <set>
      <if test="grade != null">
        grade = #{grade,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="rebate != null">
        rebate = #{rebate,jdbcType=DECIMAL},
      </if>
      <if test="upCharge != null">
        up_charge = #{upCharge,jdbcType=DECIMAL},
      </if>
      <if test="upBet != null">
        up_bet = #{upBet,jdbcType=DECIMAL},
      </if>
      <if test="awardOnce != null">
        award_once = #{awardOnce,jdbcType=DECIMAL},
      </if>
      <if test="awardMonth != null">
        award_month = #{awardMonth,jdbcType=DECIMAL},
      </if>
      <if test="minBet != null">
        min_bet = #{minBet,jdbcType=DECIMAL},
      </if>
      <if test="open != null">
        open = #{open,jdbcType=SMALLINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.Test.model.DBmodel.UsersGrade">
    update users_grade
    set grade = #{grade,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      rebate = #{rebate,jdbcType=DECIMAL},
      up_charge = #{upCharge,jdbcType=DECIMAL},
      up_bet = #{upBet,jdbcType=DECIMAL},
      award_once = #{awardOnce,jdbcType=DECIMAL},
      award_month = #{awardMonth,jdbcType=DECIMAL},
      min_bet = #{minBet,jdbcType=DECIMAL},
      open = #{open,jdbcType=SMALLINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>