<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.Test.model.DBmodel.LogUsersMapper">
  <resultMap id="BaseResultMap" type="com.Test.model.DBmodel.LogUsers">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="types" jdbcType="TINYINT" property="types" />
    <result column="action_ip" jdbcType="VARCHAR" property="actionIp" />
    <result column="client" jdbcType="BIT" property="client" />
    <result column="host" jdbcType="VARCHAR" property="host" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.Test.model.DBmodel.LogUsers">
    <result column="contents" jdbcType="LONGVARCHAR" property="contents" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, username, types, action_ip, client, host, created_at
  </sql>
  <sql id="Blob_Column_List">
    contents
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from log_users
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from log_users
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.Test.model.DBmodel.LogUsers">
    insert into log_users (id, user_id, username, 
      types, action_ip, client, 
      host, created_at, contents
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, 
      #{types,jdbcType=TINYINT}, #{actionIp,jdbcType=VARCHAR}, #{client,jdbcType=BIT}, 
      #{host,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, #{contents,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.Test.model.DBmodel.LogUsers">
    insert into log_users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="types != null">
        types,
      </if>
      <if test="actionIp != null">
        action_ip,
      </if>
      <if test="client != null">
        client,
      </if>
      <if test="host != null">
        host,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="contents != null">
        contents,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="types != null">
        #{types,jdbcType=TINYINT},
      </if>
      <if test="actionIp != null">
        #{actionIp,jdbcType=VARCHAR},
      </if>
      <if test="client != null">
        #{client,jdbcType=BIT},
      </if>
      <if test="host != null">
        #{host,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="contents != null">
        #{contents,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.Test.model.DBmodel.LogUsers">
    update log_users
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="types != null">
        types = #{types,jdbcType=TINYINT},
      </if>
      <if test="actionIp != null">
        action_ip = #{actionIp,jdbcType=VARCHAR},
      </if>
      <if test="client != null">
        client = #{client,jdbcType=BIT},
      </if>
      <if test="host != null">
        host = #{host,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="contents != null">
        contents = #{contents,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.Test.model.DBmodel.LogUsers">
    update log_users
    set user_id = #{userId,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      types = #{types,jdbcType=TINYINT},
      action_ip = #{actionIp,jdbcType=VARCHAR},
      client = #{client,jdbcType=BIT},
      host = #{host,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      contents = #{contents,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.Test.model.DBmodel.LogUsers">
    update log_users
    set user_id = #{userId,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      types = #{types,jdbcType=TINYINT},
      action_ip = #{actionIp,jdbcType=VARCHAR},
      client = #{client,jdbcType=BIT},
      host = #{host,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>